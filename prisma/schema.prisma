// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  username String  @unique
  fullname String?
  password String

  profile   Profile?
  threads   Threads[]
  like      Likes[]
  following Follows[] @relation("following")
  followers Follows[] @relation("follower")

  @@map("user")
}

model Profile {
  id         Int     @id @default(autoincrement())
  bio        String?
  avatar     String?
  background String?

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  @@map("profile")
}

model Threads {
  id      Int     @id @default(autoincrement())
  content String?
  images ThreadImages[]

  authorId Int
  author   User @relation(fields: [authorId], references: [id])

  like   Likes[]

  mainThreadId Int?
  replies      Threads[] @relation("replies")
  replyThread  Threads?  @relation("replies", fields: [mainThreadId], references: [id])

  @@map("threads")
}

model ThreadImages {
  id  Int    @id @default(autoincrement())
  url String

  threadId Int
  Thread   Threads @relation(fields: [threadId], references: [id])

  @@map("threadimage")
}

model Likes {
  userId   Int
  threadId Int

  user   User    @relation(fields: [userId], references: [id])
  thread Threads @relation(fields: [threadId], references: [id])

  @@id([userId, threadId])
  @@map("likes")
}

model Follows {
  followingId Int
  followerId  Int

  following User @relation("following", fields: [followingId], references: [id])
  follower  User @relation("follower", fields: [followerId], references: [id])

  @@id([followingId, followerId])
}
